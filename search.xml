<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Js 中 this 的指向性问题</title>
      <link href="/2020/08/03/Js%20%E4%B8%AD%20this%20%E7%9A%84%E6%8C%87%E5%90%91%E6%80%A7%E9%97%AE%E9%A2%98/"/>
      <url>/2020/08/03/Js%20%E4%B8%AD%20this%20%E7%9A%84%E6%8C%87%E5%90%91%E6%80%A7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="Js-中-this-的指向性问题"><a href="#Js-中-this-的指向性问题" class="headerlink" title="Js 中 this 的指向性问题"></a>Js 中 this 的指向性问题</h2><p><strong>一般情况下this的最终指向是调用它的对象</strong></p><h3 id="1-全局作用域或者普通函数指向全局对象window-定时器中的this指向window"><a href="#1-全局作用域或者普通函数指向全局对象window-定时器中的this指向window" class="headerlink" title="1.全局作用域或者普通函数指向全局对象window(定时器中的this指向window)"></a>1.全局作用域或者普通函数指向全局对象window(定时器中的this指向window)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//指向window</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn();<span class="comment">//fn的调用者是window,即window.fn()</span></span><br><span class="line"></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,<span class="number">1000</span>);<span class="comment">//前面也省略了一个window</span></span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h3 id="2-方法调用中谁调用this指向谁"><a href="#2-方法调用中谁调用this指向谁" class="headerlink" title="2. 方法调用中谁调用this指向谁"></a>2. 方法调用中谁调用this指向谁</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> o = &#123;</span><br><span class="line">     sayHi:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//this指向o这个对象</span></span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">o.sayHi();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.quereySelector(<span class="string">'button'</span>);</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//this指向btn这个按钮对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造函数中this指向构造函数的实例"><a href="#构造函数中this指向构造函数的实例" class="headerlink" title="构造函数中this指向构造函数的实例"></a>构造函数中this指向构造函数的实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fun</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="built_in">console</span>.log(<span class="keyword">this</span>);<span class="comment">//this指向的是fun,实例对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">new</span> Fun()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中的栈内存和堆内存</title>
      <link href="/2020/07/24/%E6%A0%88%E5%86%85%E5%AD%98%E5%92%8C%E5%A0%86%E5%86%85%E5%AD%98/"/>
      <url>/2020/07/24/%E6%A0%88%E5%86%85%E5%AD%98%E5%92%8C%E5%A0%86%E5%86%85%E5%AD%98/</url>
      
        <content type="html"><![CDATA[<h1 id="JavaScript中的栈内存和堆内存"><a href="#JavaScript中的栈内存和堆内存" class="headerlink" title="JavaScript中的栈内存和堆内存"></a>JavaScript中的栈内存和堆内存</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>JavaScript中的变量分为基本类型和引用类型.</p><h6 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型:"></a>基本类型:</h6><p>Undifined,Null,Boolean,Number和String,这些简单数据段在内存中分别占有固定大小的空间,他们的值保存在栈空间,是按<strong>值</strong>来访问的.</p><h6 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型:"></a>引用类型:</h6><p>引用类型时保存在堆内存中的对象,引用类型的值大小不固定,栈内存中存放地址指向堆内存中的对象,是按<strong>引用</strong>来访问的.</p><h2 id="结合代码和图来理解"><a href="#结合代码和图来理解" class="headerlink" title="结合代码和图来理解"></a>结合代码和图来理解</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0</span>; <span class="comment">//栈内存</span></span><br><span class="line"><span class="keyword">var</span> a2 = <span class="string">"this is string"</span>; <span class="comment">//栈内存</span></span><br><span class="line"><span class="keyword">var</span> a3 = <span class="literal">null</span>; <span class="comment">//栈内存</span></span><br><span class="line"><span class="keyword">var</span> b = &#123; <span class="attr">x</span>:<span class="number">10</span> &#125;;<span class="comment">//变量b存在于栈中,&#123;x:10&#125;作为对象存在于堆中</span></span><br><span class="line"><span class="keyword">var</span> c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];<span class="comment">//变量c存在于栈中,[1,2,3]作为对象存在于堆中</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNTExODA2Nw?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>当我们要访问堆内存中的引用数据类型时</p><ol><li>从栈中获取该对象的地址引用</li><li>再从堆内存中获得我们需要的数据</li></ol><h2 id="基本类型发生复制行为"><a href="#基本类型发生复制行为" class="headerlink" title="基本类型发生复制行为"></a>基本类型发生复制行为</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = <span class="number">30</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);<span class="comment">//20</span></span><br></pre></td></tr></table></figure><p>结合下图进行理解<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNTExODA2OA?x-oss-process=image/format,png" alt="在这里插入图片描述"><br>在栈内存中的数据发生复制行为时,系统会自动为新的变量分配一个新值,最后这些变量都是<strong>相互独立的</strong></p><h2 id="引用类型发生复制行为"><a href="#引用类型发生复制行为" class="headerlink" title="引用类型发生复制行为"></a>引用类型发生复制行为</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a =&#123; <span class="attr">x</span>:<span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.x = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a.x);<span class="comment">//5</span></span><br></pre></td></tr></table></figure><ol><li>引用类型的复制，同样为新的变量b分配一个新的值，保存在栈内存中，不同的是，这个值仅<br>仅是引用类型的一个地址指针</li><li>他们两个指向同一个值，也就是地址指针相同，在堆内存中访问到的具体对象实际上是同一个</li><li>因此改变b.x时，a.x也发生了变化，这就是引用类型的特性</li><li>结合下图理解<br><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNTExODA2OQ?x-oss-process=image/format,png" alt="在这里插入图片描述"></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src= "/img/loading.gif" data-src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2ltZy9yZW1vdGUvMTQ2MDAwMDAxNTExODA3MA?x-oss-process=image/format,png" alt="在这里插入图片描述"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 栈内存 </tag>
            
            <tag> 堆内存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于BFC</title>
      <link href="/2020/07/18/%E5%85%B3%E4%BA%8EBFC/"/>
      <url>/2020/07/18/%E5%85%B3%E4%BA%8EBFC/</url>
      
        <content type="html"><![CDATA[<h1 id="关于BFC"><a href="#关于BFC" class="headerlink" title="关于BFC"></a>关于BFC</h1><h2 id="BFC定义"><a href="#BFC定义" class="headerlink" title="BFC定义"></a>BFC定义</h2><blockquote><p>BFC(Block formatting context)直译为”块级格式化上下文”。它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p></blockquote><h2 id="创建BFC"><a href="#创建BFC" class="headerlink" title="创建BFC"></a>创建BFC</h2><ul><li>浮动元素;</li><li>position的除static和relative以外的值;</li><li><code>display:table-cell</code>元素;</li><li><code>display:table-caption</code>元素;</li><li><code>display:inline-block</code>元素;</li><li>元素设置overflow且值不为visible(hidden|scroll|auto)</li></ul><h2 id="BFC的布局规则"><a href="#BFC的布局规则" class="headerlink" title="BFC的布局规则"></a>BFC的布局规则</h2><ol><li><h3 id="不属于BFC中的相邻元素的垂直外边距不会合并"><a href="#不属于BFC中的相邻元素的垂直外边距不会合并" class="headerlink" title="不属于BFC中的相邻元素的垂直外边距不会合并;"></a>不属于BFC中的相邻元素的垂直外边距不会合并;</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">p</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: tomato;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第一行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第二行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bfc"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是第三行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200718160726834.png" alt></p><p>此时的margin重叠,为50px</p><p>属于<strong>同一个</strong>BFC的两个相邻Box的margin会发生重叠。</p><p>这三个元素都存在于body中,所以用div将第三个元素包住,形成新的BFC.<br>添加<code>.bfc {overflow: hidden;}</code></p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/2020071816061143.png" alt></p></li><li><h3 id="BFC闭合浮动"><a href="#BFC闭合浮动" class="headerlink" title="BFC闭合浮动;"></a>BFC闭合浮动;</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.bfc</span> &#123;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid grey;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>: coral;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: right;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">background</span>: skyblue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bfc"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>BFC能创造闭合浮动，里面的元素即使不用清除浮动，也不会溢出。例子中珊瑚色和天空蓝色的方块分别是左浮动和右浮动，但是它们都处于BFC闭合浮动中，别的说法是BFC中的元素参与高度计算。</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200718161441586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1JheTk5Nw==,size_16,color_FFFFFF,t_70" alt></p></li><li><h3 id="BFC元素不会与浮动元素叠加"><a href="#BFC元素不会与浮动元素叠加" class="headerlink" title="BFC元素不会与浮动元素叠加"></a>BFC元素不会与浮动元素叠加</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.outer</span> &#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid grey;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.bfc</span> &#123;</span><br><span class="line"><span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.mid</span> &#123;</span><br><span class="line"><span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line"><span class="attribute">float</span>: left;</span><br><span class="line"><span class="attribute">background</span>: coral;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mid"</span>&gt;</span>我没有设置浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>设置了左浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"outer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>设置左浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mid bfc "</span>&gt;</span>我没有设置浮动，但是触发了BFC<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>没有触发BFC时</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200718162324190.png" alt></p><p>触发BFC时</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200718162416880.png" alt></p><p>这个方法可以用来实现两列自适应布局，这时候如果左边的宽度固定，右边的内容就会自适应宽度.</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> BFC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS中浮动的影响以及如何清除</title>
      <link href="/2020/07/18/%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%BD%B1%E5%93%8D%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%B8%85%E9%99%A4/"/>
      <url>/2020/07/18/%E6%B5%AE%E5%8A%A8%E7%9A%84%E5%BD%B1%E5%93%8D%E4%BB%A5%E5%8F%8A%E5%A6%82%E4%BD%95%E6%B8%85%E9%99%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS中浮动的影响以及如何清除"><a href="#CSS中浮动的影响以及如何清除" class="headerlink" title="CSS中浮动的影响以及如何清除"></a>CSS中浮动的影响以及如何清除</h1><p>对于刚接触CSS的我来说，浮动属性基本是用来使块元素同行展示的。</p><p>但是float之后却产生了许多问题。</p><h2 id="元素浮动后产生的问题"><a href="#元素浮动后产生的问题" class="headerlink" title="元素浮动后产生的问题"></a>元素浮动后产生的问题</h2><h3 id="问题一：父元素高度塌陷"><a href="#问题一：父元素高度塌陷" class="headerlink" title="问题一：父元素高度塌陷"></a>问题一：父元素高度塌陷</h3><p>现在来写一个例子：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-class">.box</span> &#123;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#333</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.box1</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: tomato;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-class">.box2</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: saddlebrown;</span><br><span class="line">        &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span>&gt;</span>我是第一个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box2"</span>&gt;</span>我是第二个盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是子元素未进行浮动时,父元素高度由子元素撑开</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200718164228838.png" alt="微信图片_20200718095535"></p><p>当为两个子元素设置<code>float:left</code>后显示为</p><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200718164240666.png" alt></p><p>这时父元素的高度消失了，上下边框合并，这就是所谓的的<strong>高度崩塌</strong></p><h3 id="问题二：浮动元素之后的元素忽视浮动元素"><a href="#问题二：浮动元素之后的元素忽视浮动元素" class="headerlink" title="问题二：浮动元素之后的元素忽视浮动元素"></a>问题二：浮动元素之后的元素忽视浮动元素</h3><p>这个就不贴图了，浮动元素脱离文档流之后，如果后面还有元素，则会无视浮动元素存在，经常发生的就是两者重叠或后面元素被覆盖。</p><h2 id="常用的几种清除浮动的方法"><a href="#常用的几种清除浮动的方法" class="headerlink" title="常用的几种清除浮动的方法"></a>常用的几种清除浮动的方法</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><h4 id="为父元素添加高度"><a href="#为父元素添加高度" class="headerlink" title="为父元素添加高度"></a>为父元素添加高度</h4><p>在没有设置父元素的高度时，高度为<code>height:auto</code>，这时是由子元素撑开的。设置高度后解决了父元素高度塌陷问题。</p><p>缺陷:并没有解决第二个问题，以及高度固定后的维护问题。</p><h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><h4 id="在每一个浮动元素后一个空的div元素，设置clear-both"><a href="#在每一个浮动元素后一个空的div元素，设置clear-both" class="headerlink" title="在每一个浮动元素后一个空的div元素，设置clear:both"></a>在每一个浮动元素后一个空的div元素，设置<code>clear:both</code></h4><p>clear属性是设置在空元素上的，float会影响其他的相邻元素，但是clear只会影响自身，不会对他的相邻元素产生影响；他的要求是保证自己的两边不会有浮动元素；</p><p><code>clear:left</code>代表在左侧不会有浮动元素，类似的right是在右侧不会有浮动元素；<code>clear：both</code>是表示在元素的两侧不存在浮动元素；在空的div块中使用这个属性可以保证这个空div块会下移，此时就可以撑开父元素；同时这个空div块也是一个常规的块级标签因此也会良好的解决问题二；</p><p>缺陷：为了布局添加了毫无意义的标签，如果有大量的毫无意义的空div标签那么将会造成极大的冗余。</p><h3 id="方法三："><a href="#方法三：" class="headerlink" title="方法三："></a>方法三：</h3><h4 id="将父元素一起浮动"><a href="#将父元素一起浮动" class="headerlink" title="将父元素一起浮动"></a>将父元素一起浮动</h4><p>只能解决问题一，无法解决问题二.而且父元素浮动后很可能整个板块都要浮动。不推荐此方法。</p><h3 id="方法四："><a href="#方法四：" class="headerlink" title="方法四："></a>方法四：</h3><h4 id="为父元素设置overflow-hidden"><a href="#为父元素设置overflow-hidden" class="headerlink" title="为父元素设置overflow:hidden"></a>为父元素设置<code>overflow:hidden</code></h4><p>可以通过设置BFC的方式，清除浮动。</p><p>（点此处跳转至：<a href="关于BFC.md">关于BFC</a>）</p><p>如果子元素的尺寸大于父元素，或者子元素中的内容过多，那么多出来的这一部分将不会溢出，也不会显示出来，会直接被hidden起来。</p><h3 id="方法五："><a href="#方法五：" class="headerlink" title="方法五："></a>方法五：</h3><h4 id="使用伪元素-after"><a href="#使用伪元素-after" class="headerlink" title="使用伪元素::after"></a>使用伪元素::after</h4><p>（点此处跳转至：<a href="伪元素before和after的使用.md">关于BFC</a>）</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 浮动 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 伪元素::before和::after的使用</title>
      <link href="/2020/07/18/%E4%BC%AA%E5%85%83%E7%B4%A0before%E5%92%8Cafter%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/07/18/%E4%BC%AA%E5%85%83%E7%B4%A0before%E5%92%8Cafter%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-伪元素-before和-after的使用"><a href="#CSS-伪元素-before和-after的使用" class="headerlink" title="CSS 伪元素::before和::after的使用"></a>CSS 伪元素::before和::after的使用</h1><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li><h3 id="都作为标签内部的第一个-最后一个子元素"><a href="#都作为标签内部的第一个-最后一个子元素" class="headerlink" title="都作为标签内部的第一个/最后一个子元素"></a>都作为标签内部的第一个/最后一个子元素</h3></li><li><h3 id="行内元素-无法设置宽高"><a href="#行内元素-无法设置宽高" class="headerlink" title="行内元素(无法设置宽高)"></a>行内元素(无法设置宽高)</h3></li><li><h3 id="content属性必填-若没有就’’"><a href="#content属性必填-若没有就’’" class="headerlink" title="content属性必填(若没有就’’)"></a>content属性必填(若没有就’’)</h3><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li><h3 id="文字前的图标"><a href="#文字前的图标" class="headerlink" title="文字前的图标"></a>文字前的图标</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">span</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">            <span class="attribute">display</span>: inline-block;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">            <span class="attribute">background</span>: <span class="built_in">url</span>(home.png) no-repeat;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">background-size</span>: cover;</span><br><span class="line">            <span class="attribute">vertical-align</span>: bottom;</span><br><span class="line">            &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;span&gt;这是一个图片&lt;/span&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200716171703138.png" alt="home.png"></p></li><li><h3 id="导航的跟随线"><a href="#导航的跟随线" class="headerlink" title="导航的跟随线"></a>导航的跟随线</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">ul</span> &#123;</span><br><span class="line">            <span class="attribute">list-style</span>: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">text-align</span>: center;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">li</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">2px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: tomato;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">div</span>&gt;</span><br><span class="line">        &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">            &lt;li&gt;我是一个列表项&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;我也是一个&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200718164931146.png" alt></p></li><li><h3 id="清除浮动的影响"><a href="#清除浮动的影响" class="headerlink" title="清除浮动的影响"></a>清除浮动的影响</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">ul</span> &#123;</span><br><span class="line">            <span class="attribute">background-color</span>: teal;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="selector-tag">li</span> &#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: tomato;</span><br><span class="line">            <span class="attribute">float</span>: left;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">    &lt;<span class="selector-tag">ul</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-src="https://img-blog.csdnimg.cn/20200718164955869.png" alt><br>在ul后加上一个子元素来清除浮动影响</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">            <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">            <span class="attribute">display</span>: block;</span><br><span class="line">            <span class="attribute">clear</span>: both;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><pre><code>![](https://img-blog.csdnimg.cn/20200718165038390.png)ps:左边和上边的是padding与margin的自带距离,使用全局`*{margin:0;padding:0;}`即可</code></pre>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
            <tag> 伪元素 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
